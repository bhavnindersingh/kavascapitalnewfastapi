{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { store } from '../store';\nconst initialState = {\n  connected: false,\n  subscriptions: [],\n  clientId: null,\n  error: null\n};\nclass WebSocketService {\n  constructor() {\n    this.ws = null;\n    this.reconnectAttempts = 0;\n    this.maxReconnectAttempts = 5;\n    this.reconnectTimeout = null;\n    this.messageHandlers = new Set();\n    this.subscriptions = new Set();\n    this.connect = () => {\n      const token = store.getState().auth.accessToken;\n      if (!token) {\n        console.error('No access token available');\n        store.dispatch(websocketSlice.actions.setError('No access token available'));\n        return;\n      }\n      const clientId = Date.now().toString();\n      const wsUrl = `ws://localhost:8000/api/v1/kite/ws/client-${clientId}?token=${token}`;\n      try {\n        this.ws = new WebSocket(wsUrl);\n        this.ws.onopen = () => {\n          console.log('WebSocket connected');\n          this.reconnectAttempts = 0;\n          store.dispatch(websocketSlice.actions.setConnected(true));\n          store.dispatch(websocketSlice.actions.setError(null));\n        };\n        this.ws.onmessage = event => {\n          try {\n            const data = JSON.parse(event.data);\n            this.messageHandlers.forEach(handler => handler(data));\n          } catch (error) {\n            console.error('Error parsing WebSocket message:', error);\n            store.dispatch(websocketSlice.actions.setError('Error parsing WebSocket message'));\n          }\n        };\n        this.ws.onerror = error => {\n          console.error('WebSocket error:', error);\n          store.dispatch(websocketSlice.actions.setError('WebSocket connection error'));\n        };\n        this.ws.onclose = event => {\n          console.log('WebSocket disconnected', event.code);\n          store.dispatch(websocketSlice.actions.setConnected(false));\n          this.handleDisconnect();\n        };\n      } catch (error) {\n        console.error('Error creating WebSocket connection:', error);\n        store.dispatch(websocketSlice.actions.setError('Failed to connect to WebSocket'));\n        this.handleDisconnect();\n      }\n    };\n    this.handleDisconnect = () => {\n      if (this.reconnectAttempts < this.maxReconnectAttempts) {\n        this.reconnectAttempts++;\n        console.log(`WebSocket disconnected. Attempting to reconnect (${this.reconnectAttempts}/${this.maxReconnectAttempts})`);\n        if (this.reconnectTimeout) {\n          clearTimeout(this.reconnectTimeout);\n        }\n        this.reconnectTimeout = setTimeout(() => {\n          this.connect();\n        }, 2000); // Wait 2 seconds before reconnecting\n      } else {\n        console.log('Max reconnection attempts reached');\n        store.dispatch(websocketSlice.actions.setError('Failed to reconnect after multiple attempts'));\n      }\n    };\n    this.disconnect = () => {\n      if (this.ws) {\n        this.ws.close();\n        this.ws = null;\n      }\n      if (this.reconnectTimeout) {\n        clearTimeout(this.reconnectTimeout);\n        this.reconnectTimeout = null;\n      }\n      this.reconnectAttempts = 0;\n      store.dispatch(websocketSlice.actions.setConnected(false));\n    };\n    this.subscribe = instruments => {\n      if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n        this.ws.send(JSON.stringify({\n          type: 'subscribe',\n          instruments\n        }));\n        instruments.forEach(token => this.subscriptions.add(token));\n        store.dispatch(websocketSlice.actions.addSubscription(instruments[0]));\n      }\n    };\n    this.unsubscribe = instruments => {\n      if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n        this.ws.send(JSON.stringify({\n          type: 'unsubscribe',\n          instruments\n        }));\n        instruments.forEach(token => this.subscriptions.delete(token));\n        store.dispatch(websocketSlice.actions.removeSubscription(instruments[0]));\n      }\n    };\n    this.addMessageHandler = handler => {\n      this.messageHandlers.add(handler);\n    };\n    this.removeMessageHandler = handler => {\n      this.messageHandlers.delete(handler);\n    };\n  }\n}\nexport const webSocketService = new WebSocketService();\nexport const websocketSlice = createSlice({\n  name: 'websocket',\n  initialState,\n  reducers: {\n    setConnected: (state, action) => {\n      state.connected = action.payload;\n    },\n    setClientId: (state, action) => {\n      state.clientId = action.payload;\n    },\n    addSubscription: (state, action) => {\n      if (!state.subscriptions.includes(action.payload)) {\n        state.subscriptions.push(action.payload);\n      }\n    },\n    removeSubscription: (state, action) => {\n      state.subscriptions = state.subscriptions.filter(id => id !== action.payload);\n    },\n    setError: (state, action) => {\n      state.error = action.payload;\n    }\n  }\n});\nexport const {\n  setConnected,\n  setClientId,\n  addSubscription,\n  removeSubscription\n} = websocketSlice.actions;\nexport default websocketSlice.reducer;","map":{"version":3,"names":["createSlice","store","initialState","connected","subscriptions","clientId","error","WebSocketService","constructor","ws","reconnectAttempts","maxReconnectAttempts","reconnectTimeout","messageHandlers","Set","connect","token","getState","auth","accessToken","console","dispatch","websocketSlice","actions","setError","Date","now","toString","wsUrl","WebSocket","onopen","log","setConnected","onmessage","event","data","JSON","parse","forEach","handler","onerror","onclose","code","handleDisconnect","clearTimeout","setTimeout","disconnect","close","subscribe","instruments","readyState","OPEN","send","stringify","type","add","addSubscription","unsubscribe","delete","removeSubscription","addMessageHandler","removeMessageHandler","webSocketService","name","reducers","state","action","payload","setClientId","includes","push","filter","id","reducer"],"sources":["C:/Users/inder/CascadeProjects/KavasCAPITALFASTAPI-new/frontend/src/services/websocket.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { MarketData } from '../types/market';\nimport { store } from '../store';\n\ninterface WebSocketState {\n  connected: boolean;\n  subscriptions: number[];\n  clientId: string | null;\n  error: string | null;\n}\n\nconst initialState: WebSocketState = {\n  connected: false,\n  subscriptions: [],\n  clientId: null,\n  error: null,\n};\n\ntype MessageHandler = (data: MarketData) => void;\n\nclass WebSocketService {\n  private ws: WebSocket | null = null;\n  private reconnectAttempts = 0;\n  private maxReconnectAttempts = 5;\n  private reconnectTimeout: NodeJS.Timeout | null = null;\n  private messageHandlers: Set<MessageHandler> = new Set();\n  private subscriptions: Set<number> = new Set();\n\n  connect = () => {\n    const token = store.getState().auth.accessToken;\n    if (!token) {\n      console.error('No access token available');\n      store.dispatch(websocketSlice.actions.setError('No access token available'));\n      return;\n    }\n\n    const clientId = Date.now().toString();\n    const wsUrl = `ws://localhost:8000/api/v1/kite/ws/client-${clientId}?token=${token}`;\n\n    try {\n      this.ws = new WebSocket(wsUrl);\n\n      this.ws.onopen = () => {\n        console.log('WebSocket connected');\n        this.reconnectAttempts = 0;\n        store.dispatch(websocketSlice.actions.setConnected(true));\n        store.dispatch(websocketSlice.actions.setError(null));\n      };\n\n      this.ws.onmessage = (event) => {\n        try {\n          const data = JSON.parse(event.data);\n          this.messageHandlers.forEach(handler => handler(data));\n        } catch (error) {\n          console.error('Error parsing WebSocket message:', error);\n          store.dispatch(websocketSlice.actions.setError('Error parsing WebSocket message'));\n        }\n      };\n\n      this.ws.onerror = (error) => {\n        console.error('WebSocket error:', error);\n        store.dispatch(websocketSlice.actions.setError('WebSocket connection error'));\n      };\n\n      this.ws.onclose = (event) => {\n        console.log('WebSocket disconnected', event.code);\n        store.dispatch(websocketSlice.actions.setConnected(false));\n        this.handleDisconnect();\n      };\n    } catch (error) {\n      console.error('Error creating WebSocket connection:', error);\n      store.dispatch(websocketSlice.actions.setError('Failed to connect to WebSocket'));\n      this.handleDisconnect();\n    }\n  };\n\n  private handleDisconnect = () => {\n    if (this.reconnectAttempts < this.maxReconnectAttempts) {\n      this.reconnectAttempts++;\n      console.log(`WebSocket disconnected. Attempting to reconnect (${this.reconnectAttempts}/${this.maxReconnectAttempts})`);\n      \n      if (this.reconnectTimeout) {\n        clearTimeout(this.reconnectTimeout);\n      }\n      \n      this.reconnectTimeout = setTimeout(() => {\n        this.connect();\n      }, 2000); // Wait 2 seconds before reconnecting\n    } else {\n      console.log('Max reconnection attempts reached');\n      store.dispatch(websocketSlice.actions.setError('Failed to reconnect after multiple attempts'));\n    }\n  };\n\n  disconnect = () => {\n    if (this.ws) {\n      this.ws.close();\n      this.ws = null;\n    }\n    if (this.reconnectTimeout) {\n      clearTimeout(this.reconnectTimeout);\n      this.reconnectTimeout = null;\n    }\n    this.reconnectAttempts = 0;\n    store.dispatch(websocketSlice.actions.setConnected(false));\n  };\n\n  subscribe = (instruments: number[]) => {\n    if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n      this.ws.send(JSON.stringify({\n        type: 'subscribe',\n        instruments\n      }));\n      instruments.forEach(token => this.subscriptions.add(token));\n      store.dispatch(websocketSlice.actions.addSubscription(instruments[0]));\n    }\n  };\n\n  unsubscribe = (instruments: number[]) => {\n    if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n      this.ws.send(JSON.stringify({\n        type: 'unsubscribe',\n        instruments\n      }));\n      instruments.forEach(token => this.subscriptions.delete(token));\n      store.dispatch(websocketSlice.actions.removeSubscription(instruments[0]));\n    }\n  };\n\n  addMessageHandler = (handler: MessageHandler) => {\n    this.messageHandlers.add(handler);\n  };\n\n  removeMessageHandler = (handler: MessageHandler) => {\n    this.messageHandlers.delete(handler);\n  };\n}\n\nexport const webSocketService = new WebSocketService();\n\nexport const websocketSlice = createSlice({\n  name: 'websocket',\n  initialState,\n  reducers: {\n    setConnected: (state, action: PayloadAction<boolean>) => {\n      state.connected = action.payload;\n    },\n    setClientId: (state, action: PayloadAction<string>) => {\n      state.clientId = action.payload;\n    },\n    addSubscription: (state, action: PayloadAction<number>) => {\n      if (!state.subscriptions.includes(action.payload)) {\n        state.subscriptions.push(action.payload);\n      }\n    },\n    removeSubscription: (state, action: PayloadAction<number>) => {\n      state.subscriptions = state.subscriptions.filter(id => id !== action.payload);\n    },\n    setError: (state, action: PayloadAction<string | null>) => {\n      state.error = action.payload;\n    }\n  },\n});\n\nexport const {\n  setConnected,\n  setClientId,\n  addSubscription,\n  removeSubscription,\n} = websocketSlice.actions;\n\nexport default websocketSlice.reducer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}