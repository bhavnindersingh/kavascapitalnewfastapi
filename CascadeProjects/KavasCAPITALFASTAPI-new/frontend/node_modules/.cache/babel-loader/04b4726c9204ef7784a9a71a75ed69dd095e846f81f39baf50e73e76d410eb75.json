{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { websocketService } from '../services/websocket';\nimport { setConnected, setClientId, addSubscription, removeSubscription } from '../store/slices/websocketSlice';\nexport const useWebSocket = () => {\n  _s();\n  const dispatch = useDispatch();\n  const {\n    connected,\n    clientId,\n    subscriptions,\n    error\n  } = useSelector(state => state.websocket);\n  const connect = useCallback(() => {\n    if (!connected) {\n      const newClientId = clientId || `client-${Date.now()}`;\n      websocketService.connect(newClientId, subscriptions);\n      dispatch(setClientId(newClientId));\n      dispatch(setConnected(true));\n    }\n  }, [dispatch, connected, clientId, subscriptions]);\n  const disconnect = useCallback(() => {\n    websocketService.disconnect();\n    dispatch(setConnected(false));\n  }, [dispatch]);\n  const subscribe = useCallback(instrumentToken => {\n    if (connected) {\n      websocketService.subscribe([instrumentToken]);\n      dispatch(addSubscription(instrumentToken));\n    }\n  }, [dispatch, connected]);\n  const unsubscribe = useCallback(instrumentToken => {\n    if (connected) {\n      websocketService.unsubscribe([instrumentToken]);\n      dispatch(removeSubscription(instrumentToken));\n    }\n  }, [dispatch, connected]);\n  useEffect(() => {\n    connect();\n    return () => {\n      disconnect();\n    };\n  }, [connect, disconnect]);\n  return {\n    connected,\n    clientId,\n    subscriptions,\n    error,\n    connect,\n    disconnect,\n    subscribe,\n    unsubscribe\n  };\n};\n_s(useWebSocket, \"A9KEvDoDOgIs+dD/nyq/+ttOLUo=\", false, function () {\n  return [useDispatch, useSelector];\n});","map":{"version":3,"names":["useEffect","useCallback","useDispatch","useSelector","websocketService","setConnected","setClientId","addSubscription","removeSubscription","useWebSocket","_s","dispatch","connected","clientId","subscriptions","error","state","websocket","connect","newClientId","Date","now","disconnect","subscribe","instrumentToken","unsubscribe"],"sources":["C:/Users/inder/CascadeProjects/KavasCAPITALFASTAPI-new/frontend/src/hooks/useWebSocket.ts"],"sourcesContent":["import { useEffect, useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from '../store';\nimport { websocketService } from '../services/websocket';\nimport {\n    setConnected,\n    setClientId,\n    addSubscription,\n    removeSubscription,\n    setError,\n} from '../store/slices/websocketSlice';\n\nexport const useWebSocket = () => {\n    const dispatch = useDispatch();\n    const { connected, clientId, subscriptions, error } = useSelector(\n        (state: RootState) => state.websocket\n    );\n\n    const connect = useCallback(() => {\n        if (!connected) {\n            const newClientId = clientId || `client-${Date.now()}`;\n            websocketService.connect(newClientId, subscriptions);\n            dispatch(setClientId(newClientId));\n            dispatch(setConnected(true));\n        }\n    }, [dispatch, connected, clientId, subscriptions]);\n\n    const disconnect = useCallback(() => {\n        websocketService.disconnect();\n        dispatch(setConnected(false));\n    }, [dispatch]);\n\n    const subscribe = useCallback((instrumentToken: number) => {\n        if (connected) {\n            websocketService.subscribe([instrumentToken]);\n            dispatch(addSubscription(instrumentToken));\n        }\n    }, [dispatch, connected]);\n\n    const unsubscribe = useCallback((instrumentToken: number) => {\n        if (connected) {\n            websocketService.unsubscribe([instrumentToken]);\n            dispatch(removeSubscription(instrumentToken));\n        }\n    }, [dispatch, connected]);\n\n    useEffect(() => {\n        connect();\n        return () => {\n            disconnect();\n        };\n    }, [connect, disconnect]);\n\n    return {\n        connected,\n        clientId,\n        subscriptions,\n        error,\n        connect,\n        disconnect,\n        subscribe,\n        unsubscribe,\n    };\n};\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,WAAW,QAAQ,OAAO;AAC9C,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AAEtD,SAASC,gBAAgB,QAAQ,uBAAuB;AACxD,SACIC,YAAY,EACZC,WAAW,EACXC,eAAe,EACfC,kBAAkB,QAEf,gCAAgC;AAEvC,OAAO,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC9B,MAAMC,QAAQ,GAAGT,WAAW,CAAC,CAAC;EAC9B,MAAM;IAAEU,SAAS;IAAEC,QAAQ;IAAEC,aAAa;IAAEC;EAAM,CAAC,GAAGZ,WAAW,CAC5Da,KAAgB,IAAKA,KAAK,CAACC,SAChC,CAAC;EAED,MAAMC,OAAO,GAAGjB,WAAW,CAAC,MAAM;IAC9B,IAAI,CAACW,SAAS,EAAE;MACZ,MAAMO,WAAW,GAAGN,QAAQ,IAAI,UAAUO,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE;MACtDjB,gBAAgB,CAACc,OAAO,CAACC,WAAW,EAAEL,aAAa,CAAC;MACpDH,QAAQ,CAACL,WAAW,CAACa,WAAW,CAAC,CAAC;MAClCR,QAAQ,CAACN,YAAY,CAAC,IAAI,CAAC,CAAC;IAChC;EACJ,CAAC,EAAE,CAACM,QAAQ,EAAEC,SAAS,EAAEC,QAAQ,EAAEC,aAAa,CAAC,CAAC;EAElD,MAAMQ,UAAU,GAAGrB,WAAW,CAAC,MAAM;IACjCG,gBAAgB,CAACkB,UAAU,CAAC,CAAC;IAC7BX,QAAQ,CAACN,YAAY,CAAC,KAAK,CAAC,CAAC;EACjC,CAAC,EAAE,CAACM,QAAQ,CAAC,CAAC;EAEd,MAAMY,SAAS,GAAGtB,WAAW,CAAEuB,eAAuB,IAAK;IACvD,IAAIZ,SAAS,EAAE;MACXR,gBAAgB,CAACmB,SAAS,CAAC,CAACC,eAAe,CAAC,CAAC;MAC7Cb,QAAQ,CAACJ,eAAe,CAACiB,eAAe,CAAC,CAAC;IAC9C;EACJ,CAAC,EAAE,CAACb,QAAQ,EAAEC,SAAS,CAAC,CAAC;EAEzB,MAAMa,WAAW,GAAGxB,WAAW,CAAEuB,eAAuB,IAAK;IACzD,IAAIZ,SAAS,EAAE;MACXR,gBAAgB,CAACqB,WAAW,CAAC,CAACD,eAAe,CAAC,CAAC;MAC/Cb,QAAQ,CAACH,kBAAkB,CAACgB,eAAe,CAAC,CAAC;IACjD;EACJ,CAAC,EAAE,CAACb,QAAQ,EAAEC,SAAS,CAAC,CAAC;EAEzBZ,SAAS,CAAC,MAAM;IACZkB,OAAO,CAAC,CAAC;IACT,OAAO,MAAM;MACTI,UAAU,CAAC,CAAC;IAChB,CAAC;EACL,CAAC,EAAE,CAACJ,OAAO,EAAEI,UAAU,CAAC,CAAC;EAEzB,OAAO;IACHV,SAAS;IACTC,QAAQ;IACRC,aAAa;IACbC,KAAK;IACLG,OAAO;IACPI,UAAU;IACVC,SAAS;IACTE;EACJ,CAAC;AACL,CAAC;AAACf,EAAA,CAnDWD,YAAY;EAAA,QACJP,WAAW,EAC0BC,WAAW;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}