{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setOptionChainData } from '../store/slices/optionChainSlice';\nexport const useMarketData = (symbol, expiry) => {\n  _s();\n  const dispatch = useDispatch();\n  const wsRef = useRef(null);\n  const {\n    optionChainData,\n    error,\n    isLoading\n  } = useSelector(state => state.optionChain);\n  useEffect(() => {\n    const token = localStorage.getItem('access_token');\n    if (!token || !symbol || !expiry) return;\n    const ws = new WebSocket(`ws://localhost:8000/options/${symbol}/${expiry}?token=${token}`);\n    wsRef.current = ws;\n    ws.onmessage = event => {\n      const message = JSON.parse(event.data);\n      if (message.type === 'MARKET_DATA' && message.data) {\n        const marketData = message.data;\n        if (optionChainData) {\n          const updatedStrikes = optionChainData.strikes.map(strike => {\n            var _strike$call, _strike$put;\n            // Update call option\n            if (((_strike$call = strike.call) === null || _strike$call === void 0 ? void 0 : _strike$call.instrument_token) === marketData.instrument_token) {\n              return {\n                ...strike,\n                call: {\n                  ...strike.call,\n                  ltp: marketData.last_price,\n                  change: marketData.change,\n                  volume: marketData.volume,\n                  oi: marketData.oi\n                }\n              };\n            }\n            // Update put option\n            if (((_strike$put = strike.put) === null || _strike$put === void 0 ? void 0 : _strike$put.instrument_token) === marketData.instrument_token) {\n              return {\n                ...strike,\n                put: {\n                  ...strike.put,\n                  ltp: marketData.last_price,\n                  change: marketData.change,\n                  volume: marketData.volume,\n                  oi: marketData.oi\n                }\n              };\n            }\n            return strike;\n          });\n          dispatch(setOptionChainData({\n            ...optionChainData,\n            strikes: updatedStrikes\n          }));\n        }\n      } else if (message.type === 'OPTION_CHAIN' && message.data) {\n        dispatch(setOptionChainData(message.data));\n      } else if (message.type === 'ERROR') {\n        console.error('WebSocket error:', message.error);\n      }\n    };\n    ws.onerror = error => {\n      console.error('WebSocket error:', error);\n    };\n    ws.onclose = () => {\n      console.log('WebSocket connection closed');\n    };\n\n    // Subscribe to instruments when connection is established\n    ws.onopen = () => {\n      if (optionChainData) {\n        const instruments = optionChainData.strikes.flatMap(strike => {\n          var _strike$call2, _strike$put2;\n          const tokens = [];\n          if ((_strike$call2 = strike.call) !== null && _strike$call2 !== void 0 && _strike$call2.instrument_token) {\n            tokens.push(strike.call.instrument_token);\n          }\n          if ((_strike$put2 = strike.put) !== null && _strike$put2 !== void 0 && _strike$put2.instrument_token) {\n            tokens.push(strike.put.instrument_token);\n          }\n          return tokens;\n        });\n        ws.send(JSON.stringify({\n          type: 'subscribe',\n          instruments\n        }));\n      }\n    };\n    return () => {\n      if (wsRef.current) {\n        wsRef.current.close();\n        wsRef.current = null;\n      }\n    };\n  }, [symbol, expiry, dispatch, optionChainData]);\n  return {\n    optionChainData,\n    error,\n    isLoading\n  };\n};\n_s(useMarketData, \"rELkBSGwGcbjxp5lmqQ99LDTgjY=\", false, function () {\n  return [useDispatch, useSelector];\n});","map":{"version":3,"names":["useEffect","useRef","useDispatch","useSelector","setOptionChainData","useMarketData","symbol","expiry","_s","dispatch","wsRef","optionChainData","error","isLoading","state","optionChain","token","localStorage","getItem","ws","WebSocket","current","onmessage","event","message","JSON","parse","data","type","marketData","updatedStrikes","strikes","map","strike","_strike$call","_strike$put","call","instrument_token","ltp","last_price","change","volume","oi","put","console","onerror","onclose","log","onopen","instruments","flatMap","_strike$call2","_strike$put2","tokens","push","send","stringify","close"],"sources":["C:/Users/inder/CascadeProjects/KavasCAPITALFASTAPI-new/frontend/src/hooks/useMarketData.ts"],"sourcesContent":["import { useEffect, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setOptionChainData } from '../store/slices/optionChainSlice';\nimport { MarketData, OptionChainData, WSMessage, StrikeData } from '../types/options';\nimport { RootState } from '../store/store';\n\nexport const useMarketData = (symbol: string, expiry: string) => {\n    const dispatch = useDispatch();\n    const wsRef = useRef<WebSocket | null>(null);\n    const { optionChainData, error, isLoading } = useSelector((state: RootState) => state.optionChain);\n\n    useEffect(() => {\n        const token = localStorage.getItem('access_token');\n        if (!token || !symbol || !expiry) return;\n\n        const ws = new WebSocket(`ws://localhost:8000/options/${symbol}/${expiry}?token=${token}`);\n        wsRef.current = ws;\n\n        ws.onmessage = (event) => {\n            const message = JSON.parse(event.data) as WSMessage;\n            \n            if (message.type === 'MARKET_DATA' && message.data) {\n                const marketData = message.data as MarketData;\n                if (optionChainData) {\n                    const updatedStrikes = optionChainData.strikes.map((strike: StrikeData) => {\n                        // Update call option\n                        if (strike.call?.instrument_token === marketData.instrument_token) {\n                            return {\n                                ...strike,\n                                call: {\n                                    ...strike.call,\n                                    ltp: marketData.last_price,\n                                    change: marketData.change,\n                                    volume: marketData.volume,\n                                    oi: marketData.oi\n                                }\n                            };\n                        }\n                        // Update put option\n                        if (strike.put?.instrument_token === marketData.instrument_token) {\n                            return {\n                                ...strike,\n                                put: {\n                                    ...strike.put,\n                                    ltp: marketData.last_price,\n                                    change: marketData.change,\n                                    volume: marketData.volume,\n                                    oi: marketData.oi\n                                }\n                            };\n                        }\n                        return strike;\n                    });\n\n                    dispatch(setOptionChainData({\n                        ...optionChainData,\n                        strikes: updatedStrikes\n                    }));\n                }\n            } else if (message.type === 'OPTION_CHAIN' && message.data) {\n                dispatch(setOptionChainData(message.data as OptionChainData));\n            } else if (message.type === 'ERROR') {\n                console.error('WebSocket error:', message.error);\n            }\n        };\n\n        ws.onerror = (error) => {\n            console.error('WebSocket error:', error);\n        };\n\n        ws.onclose = () => {\n            console.log('WebSocket connection closed');\n        };\n\n        // Subscribe to instruments when connection is established\n        ws.onopen = () => {\n            if (optionChainData) {\n                const instruments = optionChainData.strikes.flatMap((strike: StrikeData) => {\n                    const tokens: number[] = [];\n                    if (strike.call?.instrument_token) {\n                        tokens.push(strike.call.instrument_token);\n                    }\n                    if (strike.put?.instrument_token) {\n                        tokens.push(strike.put.instrument_token);\n                    }\n                    return tokens;\n                });\n\n                ws.send(JSON.stringify({\n                    type: 'subscribe',\n                    instruments\n                }));\n            }\n        };\n\n        return () => {\n            if (wsRef.current) {\n                wsRef.current.close();\n                wsRef.current = null;\n            }\n        };\n    }, [symbol, expiry, dispatch, optionChainData]);\n\n    return { optionChainData, error, isLoading };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}