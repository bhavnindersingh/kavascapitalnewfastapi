{"ast":null,"code":"import axios from 'axios';\nimport { store } from '../store';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api/v1';\n\n// Create axios instance with base configuration\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add request interceptor to include access token\napi.interceptors.request.use(config => {\n  const token = store.getState().auth.accessToken;\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Add response interceptor to handle errors\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    // Handle unauthorized access\n    localStorage.removeItem('kite_access_token');\n    store.dispatch({\n      type: 'auth/setAccessToken',\n      payload: null\n    });\n    store.dispatch({\n      type: 'auth/setAuthenticated',\n      payload: false\n    });\n  }\n  return Promise.reject(error);\n});\n\n// API endpoints\nexport const kiteApi = {\n  getLoginUrl: async () => {\n    const response = await api.get('/kite/login');\n    return response.data.login_url;\n  },\n  handleCallback: async requestToken => {\n    const response = await api.get(`/kite/callback?request_token=${requestToken}`);\n    return response.data.access_token;\n  },\n  setToken: token => api.post('/kite/token', {\n    access_token: token\n  }),\n  validateToken: () => api.get('/kite/validate'),\n  getInstruments: () => api.get('/kite/instruments'),\n  getOptionChain: (symbol, expiry) => api.get(`/kite/options/chain/${symbol}`, {\n    params: {\n      expiry\n    }\n  }),\n  getProfile: () => api.get('/kite/profile')\n};\nexport default api;","map":{"version":3,"names":["axios","store","API_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","getState","auth","accessToken","response","error","_error$response","status","localStorage","removeItem","dispatch","type","payload","Promise","reject","kiteApi","getLoginUrl","get","data","login_url","handleCallback","requestToken","access_token","setToken","post","validateToken","getInstruments","getOptionChain","symbol","expiry","params","getProfile"],"sources":["C:/Users/inder/CascadeProjects/KavasCAPITALFASTAPI-new/frontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\nimport { store } from '../store';\nimport { MarketData, OptionChainData } from '../types/market';\n\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api/v1';\n\n// Create axios instance with base configuration\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Add request interceptor to include access token\napi.interceptors.request.use((config) => {\n  const token = store.getState().auth.accessToken;\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Add response interceptor to handle errors\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      // Handle unauthorized access\n      localStorage.removeItem('kite_access_token');\n      store.dispatch({ type: 'auth/setAccessToken', payload: null });\n      store.dispatch({ type: 'auth/setAuthenticated', payload: false });\n    }\n    return Promise.reject(error);\n  }\n);\n\n// API endpoints\nexport const kiteApi = {\n  getLoginUrl: async () => {\n    const response = await api.get('/kite/login');\n    return response.data.login_url;\n  },\n\n  handleCallback: async (requestToken: string) => {\n    const response = await api.get(`/kite/callback?request_token=${requestToken}`);\n    return response.data.access_token;\n  },\n\n  setToken: (token: string) => api.post('/kite/token', { access_token: token }),\n  validateToken: () => api.get('/kite/validate'),\n  getInstruments: () => api.get('/kite/instruments'),\n  getOptionChain: (symbol: string, expiry?: string): Promise<OptionChainData> => \n    api.get(`/kite/options/chain/${symbol}`, { params: { expiry } }),\n  getProfile: () => api.get('/kite/profile'),\n};\n\nexport default api;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,KAAK,QAAQ,UAAU;AAGhC,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,8BAA8B;;AAE/E;AACA,MAAMC,GAAG,GAAGN,KAAK,CAACO,MAAM,CAAC;EACvBC,OAAO,EAAEN,OAAO;EAChBO,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;EACvC,MAAMC,KAAK,GAAGb,KAAK,CAACc,QAAQ,CAAC,CAAC,CAACC,IAAI,CAACC,WAAW;EAC/C,IAAIH,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUK,KAAK,EAAE;EACrD;EACA,OAAOD,MAAM;AACf,CAAC,CAAC;;AAEF;AACAP,GAAG,CAACI,YAAY,CAACQ,QAAQ,CAACN,GAAG,CAC1BM,QAAQ,IAAKA,QAAQ,EACrBC,KAAK,IAAK;EAAA,IAAAC,eAAA;EACT,IAAI,EAAAA,eAAA,GAAAD,KAAK,CAACD,QAAQ,cAAAE,eAAA,uBAAdA,eAAA,CAAgBC,MAAM,MAAK,GAAG,EAAE;IAClC;IACAC,YAAY,CAACC,UAAU,CAAC,mBAAmB,CAAC;IAC5CtB,KAAK,CAACuB,QAAQ,CAAC;MAAEC,IAAI,EAAE,qBAAqB;MAAEC,OAAO,EAAE;IAAK,CAAC,CAAC;IAC9DzB,KAAK,CAACuB,QAAQ,CAAC;MAAEC,IAAI,EAAE,uBAAuB;MAAEC,OAAO,EAAE;IAAM,CAAC,CAAC;EACnE;EACA,OAAOC,OAAO,CAACC,MAAM,CAACT,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACA,OAAO,MAAMU,OAAO,GAAG;EACrBC,WAAW,EAAE,MAAAA,CAAA,KAAY;IACvB,MAAMZ,QAAQ,GAAG,MAAMZ,GAAG,CAACyB,GAAG,CAAC,aAAa,CAAC;IAC7C,OAAOb,QAAQ,CAACc,IAAI,CAACC,SAAS;EAChC,CAAC;EAEDC,cAAc,EAAE,MAAOC,YAAoB,IAAK;IAC9C,MAAMjB,QAAQ,GAAG,MAAMZ,GAAG,CAACyB,GAAG,CAAC,gCAAgCI,YAAY,EAAE,CAAC;IAC9E,OAAOjB,QAAQ,CAACc,IAAI,CAACI,YAAY;EACnC,CAAC;EAEDC,QAAQ,EAAGvB,KAAa,IAAKR,GAAG,CAACgC,IAAI,CAAC,aAAa,EAAE;IAAEF,YAAY,EAAEtB;EAAM,CAAC,CAAC;EAC7EyB,aAAa,EAAEA,CAAA,KAAMjC,GAAG,CAACyB,GAAG,CAAC,gBAAgB,CAAC;EAC9CS,cAAc,EAAEA,CAAA,KAAMlC,GAAG,CAACyB,GAAG,CAAC,mBAAmB,CAAC;EAClDU,cAAc,EAAEA,CAACC,MAAc,EAAEC,MAAe,KAC9CrC,GAAG,CAACyB,GAAG,CAAC,uBAAuBW,MAAM,EAAE,EAAE;IAAEE,MAAM,EAAE;MAAED;IAAO;EAAE,CAAC,CAAC;EAClEE,UAAU,EAAEA,CAAA,KAAMvC,GAAG,CAACyB,GAAG,CAAC,eAAe;AAC3C,CAAC;AAED,eAAezB,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}