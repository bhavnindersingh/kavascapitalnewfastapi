{"ast":null,"code":"class WebSocketService{constructor(){this.ws=null;this.reconnectAttempts=0;this.maxReconnectAttempts=5;this.reconnectTimeout=3000;// 3 seconds\nthis.messageHandlers=[];this.subscribedInstruments=new Set();this.currentSymbol=null;this.currentExpiry=null;this.connect=this.connect.bind(this);this.disconnect=this.disconnect.bind(this);this.sendMessage=this.sendMessage.bind(this);this.addMessageHandler=this.addMessageHandler.bind(this);this.removeMessageHandler=this.removeMessageHandler.bind(this);this.subscribe=this.subscribe.bind(this);this.unsubscribe=this.unsubscribe.bind(this);}connect(symbol,expiry){var _this$ws;if(((_this$ws=this.ws)===null||_this$ws===void 0?void 0:_this$ws.readyState)===WebSocket.OPEN){this.disconnect();}const token=localStorage.getItem('kite_access_token');if(!token){console.error('No access token found. Please login first.');return;}this.currentSymbol=symbol;this.currentExpiry=expiry;const wsUrl=\"ws://localhost:8000/options/\".concat(symbol,\"/\").concat(expiry,\"?token=\").concat(token);console.log('Connecting to WebSocket:',wsUrl);this.ws=new WebSocket(wsUrl);this.ws.onopen=()=>{console.log('WebSocket connected');this.reconnectAttempts=0;// Subscribe to option chain updates\nthis.sendMessage({type:'subscribe'});};this.ws.onmessage=event=>{try{const message=JSON.parse(event.data);this.messageHandlers.forEach(handler=>handler(message));}catch(error){console.error('Error parsing WebSocket message:',error);}};this.ws.onerror=error=>{console.error('WebSocket error:',error);};this.ws.onclose=()=>{console.log('WebSocket disconnected');if(this.reconnectAttempts<this.maxReconnectAttempts){console.log(\"Reconnecting... Attempt \".concat(this.reconnectAttempts+1,\"/\").concat(this.maxReconnectAttempts));this.reconnectAttempts++;setTimeout(()=>{if(this.currentSymbol&&this.currentExpiry){this.connect(this.currentSymbol,this.currentExpiry);}},this.reconnectTimeout);}};}disconnect(){if(this.ws){this.ws.close();this.ws=null;}this.subscribedInstruments.clear();this.currentSymbol=null;this.currentExpiry=null;}sendMessage(message){var _this$ws2;if(((_this$ws2=this.ws)===null||_this$ws2===void 0?void 0:_this$ws2.readyState)===WebSocket.OPEN){this.ws.send(JSON.stringify(message));}else{console.warn('WebSocket is not connected');}}addMessageHandler(handler){this.messageHandlers.push(handler);}removeMessageHandler(handler){const index=this.messageHandlers.indexOf(handler);if(index!==-1){this.messageHandlers.splice(index,1);}}subscribe(instruments){if(!instruments){console.error('Instruments are required for subscription');return;}const instrumentArray=Array.isArray(instruments)?instruments:[instruments];if(!instrumentArray.every(token=>typeof token==='number')){console.error('Invalid instrument token(s)');return;}instrumentArray.forEach(token=>this.subscribedInstruments.add(token));this.sendMessage({type:'subscribe',instruments:instrumentArray});console.log(\"Subscribed to instruments: \".concat(instrumentArray.join(', ')));}unsubscribe(instruments){if(!instruments){console.error('Instruments are required for unsubscription');return;}const instrumentArray=Array.isArray(instruments)?instruments:[instruments];if(!instrumentArray.every(token=>typeof token==='number')){console.error('Invalid instrument token(s)');return;}instrumentArray.forEach(token=>this.subscribedInstruments.delete(token));this.sendMessage({type:'unsubscribe',instruments:instrumentArray});console.log(\"Unsubscribed from instruments: \".concat(instrumentArray.join(', ')));}}export const webSocketService=new WebSocketService();","map":{"version":3,"names":["WebSocketService","constructor","ws","reconnectAttempts","maxReconnectAttempts","reconnectTimeout","messageHandlers","subscribedInstruments","Set","currentSymbol","currentExpiry","connect","bind","disconnect","sendMessage","addMessageHandler","removeMessageHandler","subscribe","unsubscribe","symbol","expiry","_this$ws","readyState","WebSocket","OPEN","token","localStorage","getItem","console","error","wsUrl","concat","log","onopen","type","onmessage","event","message","JSON","parse","data","forEach","handler","onerror","onclose","setTimeout","close","clear","_this$ws2","send","stringify","warn","push","index","indexOf","splice","instruments","instrumentArray","Array","isArray","every","add","join","delete","webSocketService"],"sources":["C:/Users/inder/CascadeProjects/KavasCAPITALFASTAPI-new/frontend/src/services/websocket.ts"],"sourcesContent":["import { WSMessage } from '../types/options';\n\nclass WebSocketService {\n    private ws: WebSocket | null = null;\n    private reconnectAttempts = 0;\n    private maxReconnectAttempts = 5;\n    private reconnectTimeout = 3000; // 3 seconds\n    private messageHandlers: ((message: WSMessage) => void)[] = [];\n    private subscribedInstruments: Set<number> = new Set();\n    private currentSymbol: string | null = null;\n    private currentExpiry: string | null = null;\n\n    constructor() {\n        this.connect = this.connect.bind(this);\n        this.disconnect = this.disconnect.bind(this);\n        this.sendMessage = this.sendMessage.bind(this);\n        this.addMessageHandler = this.addMessageHandler.bind(this);\n        this.removeMessageHandler = this.removeMessageHandler.bind(this);\n        this.subscribe = this.subscribe.bind(this);\n        this.unsubscribe = this.unsubscribe.bind(this);\n    }\n\n    connect(symbol: string, expiry: string) {\n        if (this.ws?.readyState === WebSocket.OPEN) {\n            this.disconnect();\n        }\n\n        const token = localStorage.getItem('kite_access_token');\n        if (!token) {\n            console.error('No access token found. Please login first.');\n            return;\n        }\n\n        this.currentSymbol = symbol;\n        this.currentExpiry = expiry;\n\n        const wsUrl = `ws://localhost:8000/options/${symbol}/${expiry}?token=${token}`;\n        console.log('Connecting to WebSocket:', wsUrl);\n        \n        this.ws = new WebSocket(wsUrl);\n\n        this.ws.onopen = () => {\n            console.log('WebSocket connected');\n            this.reconnectAttempts = 0;\n            // Subscribe to option chain updates\n            this.sendMessage({\n                type: 'subscribe'\n            });\n        };\n\n        this.ws.onmessage = (event) => {\n            try {\n                const message = JSON.parse(event.data);\n                this.messageHandlers.forEach(handler => handler(message));\n            } catch (error) {\n                console.error('Error parsing WebSocket message:', error);\n            }\n        };\n\n        this.ws.onerror = (error) => {\n            console.error('WebSocket error:', error);\n        };\n\n        this.ws.onclose = () => {\n            console.log('WebSocket disconnected');\n            if (this.reconnectAttempts < this.maxReconnectAttempts) {\n                console.log(`Reconnecting... Attempt ${this.reconnectAttempts + 1}/${this.maxReconnectAttempts}`);\n                this.reconnectAttempts++;\n                setTimeout(() => {\n                    if (this.currentSymbol && this.currentExpiry) {\n                        this.connect(this.currentSymbol, this.currentExpiry);\n                    }\n                }, this.reconnectTimeout);\n            }\n        };\n    }\n\n    disconnect() {\n        if (this.ws) {\n            this.ws.close();\n            this.ws = null;\n        }\n        this.subscribedInstruments.clear();\n        this.currentSymbol = null;\n        this.currentExpiry = null;\n    }\n\n    sendMessage(message: any) {\n        if (this.ws?.readyState === WebSocket.OPEN) {\n            this.ws.send(JSON.stringify(message));\n        } else {\n            console.warn('WebSocket is not connected');\n        }\n    }\n\n    addMessageHandler(handler: (message: WSMessage) => void) {\n        this.messageHandlers.push(handler);\n    }\n\n    removeMessageHandler(handler: (message: WSMessage) => void) {\n        const index = this.messageHandlers.indexOf(handler);\n        if (index !== -1) {\n            this.messageHandlers.splice(index, 1);\n        }\n    }\n\n    subscribe(instruments: number | number[]) {\n        if (!instruments) {\n            console.error('Instruments are required for subscription');\n            return;\n        }\n\n        const instrumentArray = Array.isArray(instruments) ? instruments : [instruments];\n        if (!instrumentArray.every(token => typeof token === 'number')) {\n            console.error('Invalid instrument token(s)');\n            return;\n        }\n\n        instrumentArray.forEach(token => this.subscribedInstruments.add(token));\n        this.sendMessage({\n            type: 'subscribe',\n            instruments: instrumentArray\n        });\n        console.log(`Subscribed to instruments: ${instrumentArray.join(', ')}`);\n    }\n\n    unsubscribe(instruments: number | number[]) {\n        if (!instruments) {\n            console.error('Instruments are required for unsubscription');\n            return;\n        }\n\n        const instrumentArray = Array.isArray(instruments) ? instruments : [instruments];\n        if (!instrumentArray.every(token => typeof token === 'number')) {\n            console.error('Invalid instrument token(s)');\n            return;\n        }\n\n        instrumentArray.forEach(token => this.subscribedInstruments.delete(token));\n        this.sendMessage({\n            type: 'unsubscribe',\n            instruments: instrumentArray\n        });\n        console.log(`Unsubscribed from instruments: ${instrumentArray.join(', ')}`);\n    }\n}\n\nexport const webSocketService = new WebSocketService();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}