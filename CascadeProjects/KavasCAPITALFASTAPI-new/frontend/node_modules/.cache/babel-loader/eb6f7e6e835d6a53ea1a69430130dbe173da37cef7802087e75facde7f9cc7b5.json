{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback } from 'react';\nimport { optionsApi } from '../../../services/api';\nexport const useOptionChainData = ({\n  symbol,\n  expiry,\n  threshold = 0.05\n}) => {\n  _s();\n  const [expiryDates, setExpiryDates] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const fetchExpiryDates = useCallback(async symbol => {\n    if (!symbol) {\n      setExpiryDates([]);\n      return;\n    }\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await optionsApi.getExpiryDates(symbol);\n      if (response.data && Array.isArray(response.data)) {\n        setExpiryDates(response.data);\n      } else {\n        throw new Error('Invalid expiry dates format received');\n      }\n    } catch (err) {\n      var _err$response, _err$response$data;\n      const errorMessage = ((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.detail) || err.message || 'Failed to fetch expiry dates';\n      setError(errorMessage);\n      setExpiryDates([]);\n      console.error('Failed to fetch expiry dates:', err);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n  return {\n    expiryDates,\n    loading,\n    error,\n    fetchExpiryDates\n  };\n};\n_s(useOptionChainData, \"HzHUlShk0+gQ/hr49CBr8ClXfrE=\");","map":{"version":3,"names":["useState","useCallback","optionsApi","useOptionChainData","symbol","expiry","threshold","_s","expiryDates","setExpiryDates","loading","setLoading","error","setError","fetchExpiryDates","response","getExpiryDates","data","Array","isArray","Error","err","_err$response","_err$response$data","errorMessage","detail","message","console"],"sources":["C:/Users/inder/CascadeProjects/KavasCAPITALFASTAPI-new/frontend/src/components/OptionChain/hooks/useOptionChainData.ts"],"sourcesContent":["import { useState, useCallback } from 'react';\r\nimport { optionsApi } from '../../../services/api';\r\n\r\ninterface UseOptionChainDataProps {\r\n  symbol: string;\r\n  expiry?: string;\r\n  threshold?: number;\r\n}\r\n\r\ninterface UseOptionChainDataReturn {\r\n  expiryDates: string[];\r\n  loading: boolean;\r\n  error: string | null;\r\n  fetchExpiryDates: (symbol: string) => Promise<void>;\r\n}\r\n\r\nexport const useOptionChainData = ({\r\n  symbol,\r\n  expiry,\r\n  threshold = 0.05\r\n}: UseOptionChainDataProps): UseOptionChainDataReturn => {\r\n  const [expiryDates, setExpiryDates] = useState<string[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  const fetchExpiryDates = useCallback(async (symbol: string) => {\r\n    if (!symbol) {\r\n      setExpiryDates([]);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      const response = await optionsApi.getExpiryDates(symbol);\r\n      \r\n      if (response.data && Array.isArray(response.data)) {\r\n        setExpiryDates(response.data);\r\n      } else {\r\n        throw new Error('Invalid expiry dates format received');\r\n      }\r\n    } catch (err: any) {\r\n      const errorMessage = err.response?.data?.detail || err.message || 'Failed to fetch expiry dates';\r\n      setError(errorMessage);\r\n      setExpiryDates([]);\r\n      console.error('Failed to fetch expiry dates:', err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  return {\r\n    expiryDates,\r\n    loading,\r\n    error,\r\n    fetchExpiryDates,\r\n  };\r\n};"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AAC7C,SAASC,UAAU,QAAQ,uBAAuB;AAelD,OAAO,MAAMC,kBAAkB,GAAGA,CAAC;EACjCC,MAAM;EACNC,MAAM;EACNC,SAAS,GAAG;AACW,CAAC,KAA+B;EAAAC,EAAA;EACvD,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGT,QAAQ,CAAW,EAAE,CAAC;EAC5D,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACY,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAgB,IAAI,CAAC;EAEvD,MAAMc,gBAAgB,GAAGb,WAAW,CAAC,MAAOG,MAAc,IAAK;IAC7D,IAAI,CAACA,MAAM,EAAE;MACXK,cAAc,CAAC,EAAE,CAAC;MAClB;IACF;IAEA,IAAI;MACFE,UAAU,CAAC,IAAI,CAAC;MAChBE,QAAQ,CAAC,IAAI,CAAC;MACd,MAAME,QAAQ,GAAG,MAAMb,UAAU,CAACc,cAAc,CAACZ,MAAM,CAAC;MAExD,IAAIW,QAAQ,CAACE,IAAI,IAAIC,KAAK,CAACC,OAAO,CAACJ,QAAQ,CAACE,IAAI,CAAC,EAAE;QACjDR,cAAc,CAACM,QAAQ,CAACE,IAAI,CAAC;MAC/B,CAAC,MAAM;QACL,MAAM,IAAIG,KAAK,CAAC,sCAAsC,CAAC;MACzD;IACF,CAAC,CAAC,OAAOC,GAAQ,EAAE;MAAA,IAAAC,aAAA,EAAAC,kBAAA;MACjB,MAAMC,YAAY,GAAG,EAAAF,aAAA,GAAAD,GAAG,CAACN,QAAQ,cAAAO,aAAA,wBAAAC,kBAAA,GAAZD,aAAA,CAAcL,IAAI,cAAAM,kBAAA,uBAAlBA,kBAAA,CAAoBE,MAAM,KAAIJ,GAAG,CAACK,OAAO,IAAI,8BAA8B;MAChGb,QAAQ,CAACW,YAAY,CAAC;MACtBf,cAAc,CAAC,EAAE,CAAC;MAClBkB,OAAO,CAACf,KAAK,CAAC,+BAA+B,EAAES,GAAG,CAAC;IACrD,CAAC,SAAS;MACRV,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IACLH,WAAW;IACXE,OAAO;IACPE,KAAK;IACLE;EACF,CAAC;AACH,CAAC;AAACP,EAAA,CAzCWJ,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}