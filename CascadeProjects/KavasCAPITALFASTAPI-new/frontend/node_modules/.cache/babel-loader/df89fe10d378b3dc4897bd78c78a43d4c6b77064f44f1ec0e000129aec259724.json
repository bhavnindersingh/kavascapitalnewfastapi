{"ast":null,"code":"class WebSocketService {\n  constructor() {\n    this.ws = null;\n    this.reconnectAttempts = 0;\n    this.maxReconnectAttempts = 5;\n    this.reconnectTimeout = 3000;\n    // 3 seconds\n    this.messageHandlers = [];\n    this.subscribedInstruments = new Set();\n    this.currentSymbol = null;\n    this.currentExpiry = null;\n    this.connect = this.connect.bind(this);\n    this.disconnect = this.disconnect.bind(this);\n    this.sendMessage = this.sendMessage.bind(this);\n    this.addMessageHandler = this.addMessageHandler.bind(this);\n    this.removeMessageHandler = this.removeMessageHandler.bind(this);\n    this.subscribe = this.subscribe.bind(this);\n    this.unsubscribe = this.unsubscribe.bind(this);\n  }\n  connect(symbol, expiry) {\n    var _this$ws;\n    if (((_this$ws = this.ws) === null || _this$ws === void 0 ? void 0 : _this$ws.readyState) === WebSocket.OPEN) {\n      this.disconnect();\n    }\n    const token = localStorage.getItem('kite_access_token');\n    if (!token) {\n      console.error('No access token found. Please login first.');\n      return;\n    }\n    this.currentSymbol = symbol;\n    this.currentExpiry = expiry;\n    const wsUrl = `ws://localhost:8000/options/${symbol}/${expiry}?token=${token}`;\n    console.log('Connecting to WebSocket:', wsUrl);\n    this.ws = new WebSocket(wsUrl);\n    this.ws.onopen = () => {\n      console.log('WebSocket connected');\n      this.reconnectAttempts = 0;\n      // Subscribe to option chain updates\n      this.sendMessage({\n        type: 'subscribe'\n      });\n    };\n    this.ws.onmessage = event => {\n      try {\n        const message = JSON.parse(event.data);\n        this.messageHandlers.forEach(handler => handler(message));\n      } catch (error) {\n        console.error('Error parsing WebSocket message:', error);\n      }\n    };\n    this.ws.onerror = error => {\n      console.error('WebSocket error:', error);\n    };\n    this.ws.onclose = () => {\n      console.log('WebSocket disconnected');\n      if (this.reconnectAttempts < this.maxReconnectAttempts) {\n        console.log(`Reconnecting... Attempt ${this.reconnectAttempts + 1}/${this.maxReconnectAttempts}`);\n        this.reconnectAttempts++;\n        setTimeout(() => {\n          if (this.currentSymbol && this.currentExpiry) {\n            this.connect(this.currentSymbol, this.currentExpiry);\n          }\n        }, this.reconnectTimeout);\n      }\n    };\n  }\n  disconnect() {\n    if (this.ws) {\n      this.ws.close();\n      this.ws = null;\n    }\n    this.subscribedInstruments.clear();\n    this.currentSymbol = null;\n    this.currentExpiry = null;\n  }\n  sendMessage(message) {\n    var _this$ws2;\n    if (((_this$ws2 = this.ws) === null || _this$ws2 === void 0 ? void 0 : _this$ws2.readyState) === WebSocket.OPEN) {\n      this.ws.send(JSON.stringify(message));\n    } else {\n      console.warn('WebSocket is not connected');\n    }\n  }\n  addMessageHandler(handler) {\n    this.messageHandlers.push(handler);\n  }\n  removeMessageHandler(handler) {\n    const index = this.messageHandlers.indexOf(handler);\n    if (index !== -1) {\n      this.messageHandlers.splice(index, 1);\n    }\n  }\n  subscribe(instruments) {\n    if (!instruments) {\n      console.error('Instruments are required for subscription');\n      return;\n    }\n    const instrumentArray = Array.isArray(instruments) ? instruments : [instruments];\n    if (!instrumentArray.every(token => typeof token === 'number')) {\n      console.error('Invalid instrument token(s)');\n      return;\n    }\n    instrumentArray.forEach(token => this.subscribedInstruments.add(token));\n    this.sendMessage({\n      type: 'subscribe',\n      instruments: instrumentArray\n    });\n    console.log(`Subscribed to instruments: ${instrumentArray.join(', ')}`);\n  }\n  unsubscribe(instruments) {\n    if (!instruments) {\n      console.error('Instruments are required for unsubscription');\n      return;\n    }\n    const instrumentArray = Array.isArray(instruments) ? instruments : [instruments];\n    if (!instrumentArray.every(token => typeof token === 'number')) {\n      console.error('Invalid instrument token(s)');\n      return;\n    }\n    instrumentArray.forEach(token => this.subscribedInstruments.delete(token));\n    this.sendMessage({\n      type: 'unsubscribe',\n      instruments: instrumentArray\n    });\n    console.log(`Unsubscribed from instruments: ${instrumentArray.join(', ')}`);\n  }\n}\nexport const webSocketService = new WebSocketService();","map":{"version":3,"names":["WebSocketService","constructor","ws","reconnectAttempts","maxReconnectAttempts","reconnectTimeout","messageHandlers","subscribedInstruments","Set","currentSymbol","currentExpiry","connect","bind","disconnect","sendMessage","addMessageHandler","removeMessageHandler","subscribe","unsubscribe","symbol","expiry","_this$ws","readyState","WebSocket","OPEN","token","localStorage","getItem","console","error","wsUrl","log","onopen","type","onmessage","event","message","JSON","parse","data","forEach","handler","onerror","onclose","setTimeout","close","clear","_this$ws2","send","stringify","warn","push","index","indexOf","splice","instruments","instrumentArray","Array","isArray","every","add","join","delete","webSocketService"],"sources":["C:/Users/inder/CascadeProjects/KavasCAPITALFASTAPI-new/frontend/src/services/websocket.ts"],"sourcesContent":["import { WSMessage } from '../types/options';\n\nclass WebSocketService {\n    private ws: WebSocket | null = null;\n    private reconnectAttempts = 0;\n    private maxReconnectAttempts = 5;\n    private reconnectTimeout = 3000; // 3 seconds\n    private messageHandlers: ((message: WSMessage) => void)[] = [];\n    private subscribedInstruments: Set<number> = new Set();\n    private currentSymbol: string | null = null;\n    private currentExpiry: string | null = null;\n\n    constructor() {\n        this.connect = this.connect.bind(this);\n        this.disconnect = this.disconnect.bind(this);\n        this.sendMessage = this.sendMessage.bind(this);\n        this.addMessageHandler = this.addMessageHandler.bind(this);\n        this.removeMessageHandler = this.removeMessageHandler.bind(this);\n        this.subscribe = this.subscribe.bind(this);\n        this.unsubscribe = this.unsubscribe.bind(this);\n    }\n\n    connect(symbol: string, expiry: string) {\n        if (this.ws?.readyState === WebSocket.OPEN) {\n            this.disconnect();\n        }\n\n        const token = localStorage.getItem('kite_access_token');\n        if (!token) {\n            console.error('No access token found. Please login first.');\n            return;\n        }\n\n        this.currentSymbol = symbol;\n        this.currentExpiry = expiry;\n\n        const wsUrl = `ws://localhost:8000/options/${symbol}/${expiry}?token=${token}`;\n        console.log('Connecting to WebSocket:', wsUrl);\n        \n        this.ws = new WebSocket(wsUrl);\n\n        this.ws.onopen = () => {\n            console.log('WebSocket connected');\n            this.reconnectAttempts = 0;\n            // Subscribe to option chain updates\n            this.sendMessage({\n                type: 'subscribe'\n            });\n        };\n\n        this.ws.onmessage = (event) => {\n            try {\n                const message = JSON.parse(event.data);\n                this.messageHandlers.forEach(handler => handler(message));\n            } catch (error) {\n                console.error('Error parsing WebSocket message:', error);\n            }\n        };\n\n        this.ws.onerror = (error) => {\n            console.error('WebSocket error:', error);\n        };\n\n        this.ws.onclose = () => {\n            console.log('WebSocket disconnected');\n            if (this.reconnectAttempts < this.maxReconnectAttempts) {\n                console.log(`Reconnecting... Attempt ${this.reconnectAttempts + 1}/${this.maxReconnectAttempts}`);\n                this.reconnectAttempts++;\n                setTimeout(() => {\n                    if (this.currentSymbol && this.currentExpiry) {\n                        this.connect(this.currentSymbol, this.currentExpiry);\n                    }\n                }, this.reconnectTimeout);\n            }\n        };\n    }\n\n    disconnect() {\n        if (this.ws) {\n            this.ws.close();\n            this.ws = null;\n        }\n        this.subscribedInstruments.clear();\n        this.currentSymbol = null;\n        this.currentExpiry = null;\n    }\n\n    sendMessage(message: any) {\n        if (this.ws?.readyState === WebSocket.OPEN) {\n            this.ws.send(JSON.stringify(message));\n        } else {\n            console.warn('WebSocket is not connected');\n        }\n    }\n\n    addMessageHandler(handler: (message: WSMessage) => void) {\n        this.messageHandlers.push(handler);\n    }\n\n    removeMessageHandler(handler: (message: WSMessage) => void) {\n        const index = this.messageHandlers.indexOf(handler);\n        if (index !== -1) {\n            this.messageHandlers.splice(index, 1);\n        }\n    }\n\n    subscribe(instruments: number | number[]) {\n        if (!instruments) {\n            console.error('Instruments are required for subscription');\n            return;\n        }\n\n        const instrumentArray = Array.isArray(instruments) ? instruments : [instruments];\n        if (!instrumentArray.every(token => typeof token === 'number')) {\n            console.error('Invalid instrument token(s)');\n            return;\n        }\n\n        instrumentArray.forEach(token => this.subscribedInstruments.add(token));\n        this.sendMessage({\n            type: 'subscribe',\n            instruments: instrumentArray\n        });\n        console.log(`Subscribed to instruments: ${instrumentArray.join(', ')}`);\n    }\n\n    unsubscribe(instruments: number | number[]) {\n        if (!instruments) {\n            console.error('Instruments are required for unsubscription');\n            return;\n        }\n\n        const instrumentArray = Array.isArray(instruments) ? instruments : [instruments];\n        if (!instrumentArray.every(token => typeof token === 'number')) {\n            console.error('Invalid instrument token(s)');\n            return;\n        }\n\n        instrumentArray.forEach(token => this.subscribedInstruments.delete(token));\n        this.sendMessage({\n            type: 'unsubscribe',\n            instruments: instrumentArray\n        });\n        console.log(`Unsubscribed from instruments: ${instrumentArray.join(', ')}`);\n    }\n}\n\nexport const webSocketService = new WebSocketService();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}