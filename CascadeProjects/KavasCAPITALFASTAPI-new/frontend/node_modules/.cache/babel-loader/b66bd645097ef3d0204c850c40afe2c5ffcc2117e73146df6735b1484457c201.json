{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState, useCallback } from 'react';\nimport { webSocketService } from '../services/websocket';\nimport { useDispatch } from 'react-redux';\nimport { setOptionChainData, setError, setLoading } from '../store/slices/optionChainSlice';\nexport function useMarketData(symbol, expiry) {\n  _s();\n  const dispatch = useDispatch();\n  const [instrumentTokens, setInstrumentTokens] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setLocalError] = useState(null);\n  const handleMarketData = useCallback(message => {\n    try {\n      if (message.type === 'MARKET_DATA' && message.data) {\n        const marketData = message.data;\n        dispatch(setOptionChainData(prevState => {\n          if (!prevState) return null;\n          const updatedStrikes = prevState.strikes.map(strike => {\n            var _strike$call, _strike$put;\n            if (((_strike$call = strike.call) === null || _strike$call === void 0 ? void 0 : _strike$call.instrument_token) === marketData.instrument_token) {\n              return {\n                ...strike,\n                call: {\n                  ...strike.call,\n                  ltp: marketData.last_price,\n                  oi: marketData.oi,\n                  change: marketData.change,\n                  volume: marketData.volume\n                }\n              };\n            }\n            if (((_strike$put = strike.put) === null || _strike$put === void 0 ? void 0 : _strike$put.instrument_token) === marketData.instrument_token) {\n              return {\n                ...strike,\n                put: {\n                  ...strike.put,\n                  ltp: marketData.last_price,\n                  oi: marketData.oi,\n                  change: marketData.change,\n                  volume: marketData.volume\n                }\n              };\n            }\n            return strike;\n          });\n          return {\n            ...prevState,\n            strikes: updatedStrikes\n          };\n        }));\n      } else if (message.type === 'OPTION_CHAIN' && message.data) {\n        const chainData = message.data;\n        dispatch(setOptionChainData(chainData));\n        setLocalError(null);\n        setIsLoading(false);\n\n        // Extract instrument tokens\n        const tokens = [];\n        chainData.strikes.forEach(strike => {\n          var _strike$call2, _strike$put2;\n          if ((_strike$call2 = strike.call) !== null && _strike$call2 !== void 0 && _strike$call2.instrument_token) {\n            tokens.push(strike.call.instrument_token);\n          }\n          if ((_strike$put2 = strike.put) !== null && _strike$put2 !== void 0 && _strike$put2.instrument_token) {\n            tokens.push(strike.put.instrument_token);\n          }\n        });\n        setInstrumentTokens(tokens);\n      } else if (message.type === 'ERROR') {\n        setLocalError(message.error || 'Unknown error occurred');\n        setIsLoading(false);\n        dispatch(setError(message.error || 'Unknown error occurred'));\n      }\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Unknown error occurred';\n      console.error('Error handling market data:', errorMessage);\n      setLocalError(errorMessage);\n      setIsLoading(false);\n      dispatch(setError(errorMessage));\n    }\n  }, [dispatch]);\n\n  // Connect to WebSocket and set up handlers\n  useEffect(() => {\n    setIsLoading(true);\n    setLocalError(null);\n    dispatch(setLoading(true));\n    dispatch(setError(null));\n    webSocketService.connect(symbol, expiry);\n    webSocketService.addMessageHandler(handleMarketData);\n    return () => {\n      webSocketService.removeMessageHandler(handleMarketData);\n      webSocketService.disconnect();\n    };\n  }, [symbol, expiry, handleMarketData, dispatch]);\n\n  // Subscribe to instruments\n  useEffect(() => {\n    if (instrumentTokens.length > 0) {\n      console.log('Subscribing to instruments:', instrumentTokens);\n      webSocketService.subscribe(instrumentTokens);\n      return () => {\n        console.log('Unsubscribing from instruments:', instrumentTokens);\n        webSocketService.unsubscribe(instrumentTokens);\n      };\n    }\n  }, [instrumentTokens]);\n  return {\n    error: error,\n    isLoading\n  };\n}\n_s(useMarketData, \"n1GS0kR1c4WP1VkcZouF2xDZSYE=\", false, function () {\n  return [useDispatch];\n});","map":{"version":3,"names":["useEffect","useState","useCallback","webSocketService","useDispatch","setOptionChainData","setError","setLoading","useMarketData","symbol","expiry","_s","dispatch","instrumentTokens","setInstrumentTokens","isLoading","setIsLoading","error","setLocalError","handleMarketData","message","type","data","marketData","prevState","updatedStrikes","strikes","map","strike","_strike$call","_strike$put","call","instrument_token","ltp","last_price","oi","change","volume","put","chainData","tokens","forEach","_strike$call2","_strike$put2","push","err","errorMessage","Error","console","connect","addMessageHandler","removeMessageHandler","disconnect","length","log","subscribe","unsubscribe"],"sources":["C:/Users/inder/CascadeProjects/KavasCAPITALFASTAPI-new/frontend/src/hooks/useMarketData.ts"],"sourcesContent":["import { useEffect, useState, useCallback } from 'react';\nimport { webSocketService } from '../services/websocket';\nimport { OptionChainData, WSMessage, MarketData } from '../types/options';\nimport { useDispatch } from 'react-redux';\nimport { setOptionChainData, setError, setLoading } from '../store/slices/optionChainSlice';\n\nexport function useMarketData(symbol: string, expiry: string) {\n    const dispatch = useDispatch();\n    const [instrumentTokens, setInstrumentTokens] = useState<number[]>([]);\n    const [isLoading, setIsLoading] = useState<boolean>(true);\n    const [error, setLocalError] = useState<string | null>(null);\n\n    const handleMarketData = useCallback((message: WSMessage) => {\n        try {\n            if (message.type === 'MARKET_DATA' && message.data) {\n                const marketData = message.data as MarketData;\n                dispatch(setOptionChainData((prevState: OptionChainData | null) => {\n                    if (!prevState) return null;\n\n                    const updatedStrikes = prevState.strikes.map(strike => {\n                        if (strike.call?.instrument_token === marketData.instrument_token) {\n                            return {\n                                ...strike,\n                                call: {\n                                    ...strike.call,\n                                    ltp: marketData.last_price,\n                                    oi: marketData.oi,\n                                    change: marketData.change,\n                                    volume: marketData.volume,\n                                },\n                            };\n                        }\n                        if (strike.put?.instrument_token === marketData.instrument_token) {\n                            return {\n                                ...strike,\n                                put: {\n                                    ...strike.put,\n                                    ltp: marketData.last_price,\n                                    oi: marketData.oi,\n                                    change: marketData.change,\n                                    volume: marketData.volume,\n                                },\n                            };\n                        }\n                        return strike;\n                    });\n\n                    return {\n                        ...prevState,\n                        strikes: updatedStrikes,\n                    };\n                }));\n            } else if (message.type === 'OPTION_CHAIN' && message.data) {\n                const chainData = message.data as OptionChainData;\n                dispatch(setOptionChainData(chainData));\n                setLocalError(null);\n                setIsLoading(false);\n\n                // Extract instrument tokens\n                const tokens: number[] = [];\n                chainData.strikes.forEach(strike => {\n                    if (strike.call?.instrument_token) {\n                        tokens.push(strike.call.instrument_token);\n                    }\n                    if (strike.put?.instrument_token) {\n                        tokens.push(strike.put.instrument_token);\n                    }\n                });\n                setInstrumentTokens(tokens);\n            } else if (message.type === 'ERROR') {\n                setLocalError(message.error || 'Unknown error occurred');\n                setIsLoading(false);\n                dispatch(setError(message.error || 'Unknown error occurred'));\n            }\n        } catch (err) {\n            const errorMessage = err instanceof Error ? err.message : 'Unknown error occurred';\n            console.error('Error handling market data:', errorMessage);\n            setLocalError(errorMessage);\n            setIsLoading(false);\n            dispatch(setError(errorMessage));\n        }\n    }, [dispatch]);\n\n    // Connect to WebSocket and set up handlers\n    useEffect(() => {\n        setIsLoading(true);\n        setLocalError(null);\n        dispatch(setLoading(true));\n        dispatch(setError(null));\n\n        webSocketService.connect(symbol, expiry);\n        webSocketService.addMessageHandler(handleMarketData);\n\n        return () => {\n            webSocketService.removeMessageHandler(handleMarketData);\n            webSocketService.disconnect();\n        };\n    }, [symbol, expiry, handleMarketData, dispatch]);\n\n    // Subscribe to instruments\n    useEffect(() => {\n        if (instrumentTokens.length > 0) {\n            console.log('Subscribing to instruments:', instrumentTokens);\n            webSocketService.subscribe(instrumentTokens);\n\n            return () => {\n                console.log('Unsubscribing from instruments:', instrumentTokens);\n                webSocketService.unsubscribe(instrumentTokens);\n            };\n        }\n    }, [instrumentTokens]);\n\n    return {\n        error: error,\n        isLoading\n    };\n}\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AACxD,SAASC,gBAAgB,QAAQ,uBAAuB;AAExD,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,kBAAkB,EAAEC,QAAQ,EAAEC,UAAU,QAAQ,kCAAkC;AAE3F,OAAO,SAASC,aAAaA,CAACC,MAAc,EAAEC,MAAc,EAAE;EAAAC,EAAA;EAC1D,MAAMC,QAAQ,GAAGR,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACS,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGb,QAAQ,CAAW,EAAE,CAAC;EACtE,MAAM,CAACc,SAAS,EAAEC,YAAY,CAAC,GAAGf,QAAQ,CAAU,IAAI,CAAC;EACzD,MAAM,CAACgB,KAAK,EAAEC,aAAa,CAAC,GAAGjB,QAAQ,CAAgB,IAAI,CAAC;EAE5D,MAAMkB,gBAAgB,GAAGjB,WAAW,CAAEkB,OAAkB,IAAK;IACzD,IAAI;MACA,IAAIA,OAAO,CAACC,IAAI,KAAK,aAAa,IAAID,OAAO,CAACE,IAAI,EAAE;QAChD,MAAMC,UAAU,GAAGH,OAAO,CAACE,IAAkB;QAC7CV,QAAQ,CAACP,kBAAkB,CAAEmB,SAAiC,IAAK;UAC/D,IAAI,CAACA,SAAS,EAAE,OAAO,IAAI;UAE3B,MAAMC,cAAc,GAAGD,SAAS,CAACE,OAAO,CAACC,GAAG,CAACC,MAAM,IAAI;YAAA,IAAAC,YAAA,EAAAC,WAAA;YACnD,IAAI,EAAAD,YAAA,GAAAD,MAAM,CAACG,IAAI,cAAAF,YAAA,uBAAXA,YAAA,CAAaG,gBAAgB,MAAKT,UAAU,CAACS,gBAAgB,EAAE;cAC/D,OAAO;gBACH,GAAGJ,MAAM;gBACTG,IAAI,EAAE;kBACF,GAAGH,MAAM,CAACG,IAAI;kBACdE,GAAG,EAAEV,UAAU,CAACW,UAAU;kBAC1BC,EAAE,EAAEZ,UAAU,CAACY,EAAE;kBACjBC,MAAM,EAAEb,UAAU,CAACa,MAAM;kBACzBC,MAAM,EAAEd,UAAU,CAACc;gBACvB;cACJ,CAAC;YACL;YACA,IAAI,EAAAP,WAAA,GAAAF,MAAM,CAACU,GAAG,cAAAR,WAAA,uBAAVA,WAAA,CAAYE,gBAAgB,MAAKT,UAAU,CAACS,gBAAgB,EAAE;cAC9D,OAAO;gBACH,GAAGJ,MAAM;gBACTU,GAAG,EAAE;kBACD,GAAGV,MAAM,CAACU,GAAG;kBACbL,GAAG,EAAEV,UAAU,CAACW,UAAU;kBAC1BC,EAAE,EAAEZ,UAAU,CAACY,EAAE;kBACjBC,MAAM,EAAEb,UAAU,CAACa,MAAM;kBACzBC,MAAM,EAAEd,UAAU,CAACc;gBACvB;cACJ,CAAC;YACL;YACA,OAAOT,MAAM;UACjB,CAAC,CAAC;UAEF,OAAO;YACH,GAAGJ,SAAS;YACZE,OAAO,EAAED;UACb,CAAC;QACL,CAAC,CAAC,CAAC;MACP,CAAC,MAAM,IAAIL,OAAO,CAACC,IAAI,KAAK,cAAc,IAAID,OAAO,CAACE,IAAI,EAAE;QACxD,MAAMiB,SAAS,GAAGnB,OAAO,CAACE,IAAuB;QACjDV,QAAQ,CAACP,kBAAkB,CAACkC,SAAS,CAAC,CAAC;QACvCrB,aAAa,CAAC,IAAI,CAAC;QACnBF,YAAY,CAAC,KAAK,CAAC;;QAEnB;QACA,MAAMwB,MAAgB,GAAG,EAAE;QAC3BD,SAAS,CAACb,OAAO,CAACe,OAAO,CAACb,MAAM,IAAI;UAAA,IAAAc,aAAA,EAAAC,YAAA;UAChC,KAAAD,aAAA,GAAId,MAAM,CAACG,IAAI,cAAAW,aAAA,eAAXA,aAAA,CAAaV,gBAAgB,EAAE;YAC/BQ,MAAM,CAACI,IAAI,CAAChB,MAAM,CAACG,IAAI,CAACC,gBAAgB,CAAC;UAC7C;UACA,KAAAW,YAAA,GAAIf,MAAM,CAACU,GAAG,cAAAK,YAAA,eAAVA,YAAA,CAAYX,gBAAgB,EAAE;YAC9BQ,MAAM,CAACI,IAAI,CAAChB,MAAM,CAACU,GAAG,CAACN,gBAAgB,CAAC;UAC5C;QACJ,CAAC,CAAC;QACFlB,mBAAmB,CAAC0B,MAAM,CAAC;MAC/B,CAAC,MAAM,IAAIpB,OAAO,CAACC,IAAI,KAAK,OAAO,EAAE;QACjCH,aAAa,CAACE,OAAO,CAACH,KAAK,IAAI,wBAAwB,CAAC;QACxDD,YAAY,CAAC,KAAK,CAAC;QACnBJ,QAAQ,CAACN,QAAQ,CAACc,OAAO,CAACH,KAAK,IAAI,wBAAwB,CAAC,CAAC;MACjE;IACJ,CAAC,CAAC,OAAO4B,GAAG,EAAE;MACV,MAAMC,YAAY,GAAGD,GAAG,YAAYE,KAAK,GAAGF,GAAG,CAACzB,OAAO,GAAG,wBAAwB;MAClF4B,OAAO,CAAC/B,KAAK,CAAC,6BAA6B,EAAE6B,YAAY,CAAC;MAC1D5B,aAAa,CAAC4B,YAAY,CAAC;MAC3B9B,YAAY,CAAC,KAAK,CAAC;MACnBJ,QAAQ,CAACN,QAAQ,CAACwC,YAAY,CAAC,CAAC;IACpC;EACJ,CAAC,EAAE,CAAClC,QAAQ,CAAC,CAAC;;EAEd;EACAZ,SAAS,CAAC,MAAM;IACZgB,YAAY,CAAC,IAAI,CAAC;IAClBE,aAAa,CAAC,IAAI,CAAC;IACnBN,QAAQ,CAACL,UAAU,CAAC,IAAI,CAAC,CAAC;IAC1BK,QAAQ,CAACN,QAAQ,CAAC,IAAI,CAAC,CAAC;IAExBH,gBAAgB,CAAC8C,OAAO,CAACxC,MAAM,EAAEC,MAAM,CAAC;IACxCP,gBAAgB,CAAC+C,iBAAiB,CAAC/B,gBAAgB,CAAC;IAEpD,OAAO,MAAM;MACThB,gBAAgB,CAACgD,oBAAoB,CAAChC,gBAAgB,CAAC;MACvDhB,gBAAgB,CAACiD,UAAU,CAAC,CAAC;IACjC,CAAC;EACL,CAAC,EAAE,CAAC3C,MAAM,EAAEC,MAAM,EAAES,gBAAgB,EAAEP,QAAQ,CAAC,CAAC;;EAEhD;EACAZ,SAAS,CAAC,MAAM;IACZ,IAAIa,gBAAgB,CAACwC,MAAM,GAAG,CAAC,EAAE;MAC7BL,OAAO,CAACM,GAAG,CAAC,6BAA6B,EAAEzC,gBAAgB,CAAC;MAC5DV,gBAAgB,CAACoD,SAAS,CAAC1C,gBAAgB,CAAC;MAE5C,OAAO,MAAM;QACTmC,OAAO,CAACM,GAAG,CAAC,iCAAiC,EAAEzC,gBAAgB,CAAC;QAChEV,gBAAgB,CAACqD,WAAW,CAAC3C,gBAAgB,CAAC;MAClD,CAAC;IACL;EACJ,CAAC,EAAE,CAACA,gBAAgB,CAAC,CAAC;EAEtB,OAAO;IACHI,KAAK,EAAEA,KAAK;IACZF;EACJ,CAAC;AACL;AAACJ,EAAA,CA9GeH,aAAa;EAAA,QACRJ,WAAW;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}