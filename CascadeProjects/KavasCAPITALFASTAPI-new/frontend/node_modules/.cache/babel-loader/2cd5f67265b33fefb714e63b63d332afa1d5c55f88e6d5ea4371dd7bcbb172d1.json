{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useWebSocket } from './useWebSocket';\nimport { setError } from '../store/slices/authSlice';\nexport const useAuth = () => {\n  _s();\n  const dispatch = useDispatch();\n  const {\n    isAuthenticated,\n    accessToken,\n    loading,\n    error\n  } = useSelector(state => state.auth);\n  const {\n    connect,\n    disconnect\n  } = useWebSocket();\n  useEffect(() => {\n    if (isAuthenticated && accessToken) {\n      // When authenticated, connect to WebSocket\n      connect();\n    } else {\n      // When not authenticated, disconnect from WebSocket\n      disconnect();\n    }\n  }, [isAuthenticated, accessToken, connect, disconnect]);\n  useEffect(() => {\n    // Check if token exists in localStorage but not in state\n    const storedToken = localStorage.getItem('kite_access_token');\n    if (storedToken && !accessToken) {\n      dispatch(setError('Session expired. Please login again.'));\n    }\n  }, [dispatch, accessToken]);\n  return {\n    isAuthenticated,\n    accessToken,\n    loading,\n    error\n  };\n};\n_s(useAuth, \"jbzpusE/00B6uD/S0N+Uos4dozw=\", false, function () {\n  return [useDispatch, useSelector, useWebSocket];\n});","map":{"version":3,"names":["useEffect","useDispatch","useSelector","useWebSocket","setError","useAuth","_s","dispatch","isAuthenticated","accessToken","loading","error","state","auth","connect","disconnect","storedToken","localStorage","getItem"],"sources":["C:/Users/inder/CascadeProjects/KavasCAPITALFASTAPI-new/frontend/src/hooks/useAuth.ts"],"sourcesContent":["import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from '../store';\nimport { useWebSocket } from './useWebSocket';\nimport { setError } from '../store/slices/authSlice';\n\nexport const useAuth = () => {\n    const dispatch = useDispatch();\n    const { isAuthenticated, accessToken, loading, error } = useSelector(\n        (state: RootState) => state.auth\n    );\n    const { connect, disconnect } = useWebSocket();\n\n    useEffect(() => {\n        if (isAuthenticated && accessToken) {\n            // When authenticated, connect to WebSocket\n            connect();\n        } else {\n            // When not authenticated, disconnect from WebSocket\n            disconnect();\n        }\n    }, [isAuthenticated, accessToken, connect, disconnect]);\n\n    useEffect(() => {\n        // Check if token exists in localStorage but not in state\n        const storedToken = localStorage.getItem('kite_access_token');\n        if (storedToken && !accessToken) {\n            dispatch(setError('Session expired. Please login again.'));\n        }\n    }, [dispatch, accessToken]);\n\n    return {\n        isAuthenticated,\n        accessToken,\n        loading,\n        error,\n    };\n};\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AAEtD,SAASC,YAAY,QAAQ,gBAAgB;AAC7C,SAASC,QAAQ,QAAQ,2BAA2B;AAEpD,OAAO,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAMC,QAAQ,GAAGN,WAAW,CAAC,CAAC;EAC9B,MAAM;IAAEO,eAAe;IAAEC,WAAW;IAAEC,OAAO;IAAEC;EAAM,CAAC,GAAGT,WAAW,CAC/DU,KAAgB,IAAKA,KAAK,CAACC,IAChC,CAAC;EACD,MAAM;IAAEC,OAAO;IAAEC;EAAW,CAAC,GAAGZ,YAAY,CAAC,CAAC;EAE9CH,SAAS,CAAC,MAAM;IACZ,IAAIQ,eAAe,IAAIC,WAAW,EAAE;MAChC;MACAK,OAAO,CAAC,CAAC;IACb,CAAC,MAAM;MACH;MACAC,UAAU,CAAC,CAAC;IAChB;EACJ,CAAC,EAAE,CAACP,eAAe,EAAEC,WAAW,EAAEK,OAAO,EAAEC,UAAU,CAAC,CAAC;EAEvDf,SAAS,CAAC,MAAM;IACZ;IACA,MAAMgB,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,mBAAmB,CAAC;IAC7D,IAAIF,WAAW,IAAI,CAACP,WAAW,EAAE;MAC7BF,QAAQ,CAACH,QAAQ,CAAC,sCAAsC,CAAC,CAAC;IAC9D;EACJ,CAAC,EAAE,CAACG,QAAQ,EAAEE,WAAW,CAAC,CAAC;EAE3B,OAAO;IACHD,eAAe;IACfC,WAAW;IACXC,OAAO;IACPC;EACJ,CAAC;AACL,CAAC;AAACL,EAAA,CA/BWD,OAAO;EAAA,QACCJ,WAAW,EAC6BC,WAAW,EAGpCC,YAAY;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}