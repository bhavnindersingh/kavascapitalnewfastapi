{"ast":null,"code":"var _WebSocketService;\nimport { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  connected: false,\n  subscriptions: [],\n  clientId: null\n};\nclass WebSocketService {\n  constructor() {\n    this.ws = null;\n    this.reconnectAttempts = 0;\n    this.maxReconnectAttempts = 5;\n    this.reconnectTimeout = 5000;\n    this.subscriptions = new Set();\n    this.messageHandlers = [];\n  }\n  static getInstance() {\n    if (!WebSocketService.instance) {\n      WebSocketService.instance = new WebSocketService();\n    }\n    return WebSocketService.instance;\n  }\n  connect(clientId, instruments) {\n    const wsUrl = `ws://localhost:8000/api/v1/kite/ws/${clientId}`;\n    const queryParams = instruments !== null && instruments !== void 0 && instruments.length ? `?instruments=${instruments.join(',')}` : '';\n    this.ws = new WebSocket(wsUrl + queryParams);\n    this.ws.onopen = () => {\n      console.log('WebSocket connected');\n      this.reconnectAttempts = 0;\n      if (instruments !== null && instruments !== void 0 && instruments.length) {\n        this.subscriptions = new Set(instruments);\n      }\n    };\n    this.ws.onmessage = event => {\n      try {\n        const data = JSON.parse(event.data);\n        this.messageHandlers.forEach(handler => handler(data));\n      } catch (error) {\n        console.error('Error parsing WebSocket message:', error);\n      }\n    };\n    this.ws.onclose = () => {\n      console.log('WebSocket disconnected');\n      this.attemptReconnect();\n    };\n    this.ws.onerror = error => {\n      console.error('WebSocket error:', error);\n    };\n  }\n  attemptReconnect() {\n    if (this.reconnectAttempts < this.maxReconnectAttempts) {\n      this.reconnectAttempts++;\n      setTimeout(() => {\n        console.log(`Attempting to reconnect (${this.reconnectAttempts}/${this.maxReconnectAttempts})`);\n        this.connect(this.clientId, Array.from(this.subscriptions));\n      }, this.reconnectTimeout);\n    }\n  }\n  subscribe(instruments) {\n    if (!this.ws || this.ws.readyState !== WebSocket.OPEN) {\n      console.error('WebSocket is not connected');\n      return;\n    }\n    instruments.forEach(token => this.subscriptions.add(token));\n    this.ws.send(JSON.stringify({\n      type: 'subscribe',\n      tokens: instruments\n    }));\n  }\n  unsubscribe(instruments) {\n    if (!this.ws || this.ws.readyState !== WebSocket.OPEN) {\n      console.error('WebSocket is not connected');\n      return;\n    }\n    instruments.forEach(token => this.subscriptions.delete(token));\n    this.ws.send(JSON.stringify({\n      type: 'unsubscribe',\n      tokens: instruments\n    }));\n  }\n  addMessageHandler(handler) {\n    this.messageHandlers.push(handler);\n  }\n  removeMessageHandler(handler) {\n    this.messageHandlers = this.messageHandlers.filter(h => h !== handler);\n  }\n  disconnect() {\n    if (this.ws) {\n      this.ws.close();\n      this.ws = null;\n      this.subscriptions.clear();\n      this.messageHandlers = [];\n    }\n  }\n}\n_WebSocketService = WebSocketService;\nWebSocketService.instance = void 0;\nexport const websocketSlice = createSlice({\n  name: 'websocket',\n  initialState,\n  reducers: {\n    setConnected: (state, action) => {\n      state.connected = action.payload;\n    },\n    setClientId: (state, action) => {\n      state.clientId = action.payload;\n    },\n    addSubscription: (state, action) => {\n      if (!state.subscriptions.includes(action.payload)) {\n        state.subscriptions.push(action.payload);\n      }\n    },\n    removeSubscription: (state, action) => {\n      state.subscriptions = state.subscriptions.filter(id => id !== action.payload);\n    }\n  }\n});\nexport const {\n  setConnected,\n  setClientId,\n  addSubscription,\n  removeSubscription\n} = websocketSlice.actions;\nexport const websocketReducer = websocketSlice.reducer;\nexport const websocketService = WebSocketService.getInstance();","map":{"version":3,"names":["createSlice","initialState","connected","subscriptions","clientId","WebSocketService","constructor","ws","reconnectAttempts","maxReconnectAttempts","reconnectTimeout","Set","messageHandlers","getInstance","instance","connect","instruments","wsUrl","queryParams","length","join","WebSocket","onopen","console","log","onmessage","event","data","JSON","parse","forEach","handler","error","onclose","attemptReconnect","onerror","setTimeout","Array","from","subscribe","readyState","OPEN","token","add","send","stringify","type","tokens","unsubscribe","delete","addMessageHandler","push","removeMessageHandler","filter","h","disconnect","close","clear","_WebSocketService","websocketSlice","name","reducers","setConnected","state","action","payload","setClientId","addSubscription","includes","removeSubscription","id","actions","websocketReducer","reducer","websocketService"],"sources":["C:/Users/inder/CascadeProjects/KavasCAPITALFASTAPI-new/frontend/src/services/websocket.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\ninterface WebSocketState {\n  connected: boolean;\n  subscriptions: number[];\n  clientId: string | null;\n}\n\nconst initialState: WebSocketState = {\n  connected: false,\n  subscriptions: [],\n  clientId: null,\n};\n\nclass WebSocketService {\n  private static instance: WebSocketService;\n  private ws: WebSocket | null = null;\n  private reconnectAttempts = 0;\n  private maxReconnectAttempts = 5;\n  private reconnectTimeout = 5000;\n  private subscriptions: Set<number> = new Set();\n  private messageHandlers: ((data: any) => void)[] = [];\n\n  private constructor() {}\n\n  static getInstance(): WebSocketService {\n    if (!WebSocketService.instance) {\n      WebSocketService.instance = new WebSocketService();\n    }\n    return WebSocketService.instance;\n  }\n\n  connect(clientId: string, instruments?: number[]) {\n    const wsUrl = `ws://localhost:8000/api/v1/kite/ws/${clientId}`;\n    const queryParams = instruments?.length \n      ? `?instruments=${instruments.join(',')}`\n      : '';\n\n    this.ws = new WebSocket(wsUrl + queryParams);\n\n    this.ws.onopen = () => {\n      console.log('WebSocket connected');\n      this.reconnectAttempts = 0;\n      if (instruments?.length) {\n        this.subscriptions = new Set(instruments);\n      }\n    };\n\n    this.ws.onmessage = (event) => {\n      try {\n        const data = JSON.parse(event.data);\n        this.messageHandlers.forEach(handler => handler(data));\n      } catch (error) {\n        console.error('Error parsing WebSocket message:', error);\n      }\n    };\n\n    this.ws.onclose = () => {\n      console.log('WebSocket disconnected');\n      this.attemptReconnect();\n    };\n\n    this.ws.onerror = (error) => {\n      console.error('WebSocket error:', error);\n    };\n  }\n\n  private attemptReconnect() {\n    if (this.reconnectAttempts < this.maxReconnectAttempts) {\n      this.reconnectAttempts++;\n      setTimeout(() => {\n        console.log(`Attempting to reconnect (${this.reconnectAttempts}/${this.maxReconnectAttempts})`);\n        this.connect(this.clientId, Array.from(this.subscriptions));\n      }, this.reconnectTimeout);\n    }\n  }\n\n  subscribe(instruments: number[]) {\n    if (!this.ws || this.ws.readyState !== WebSocket.OPEN) {\n      console.error('WebSocket is not connected');\n      return;\n    }\n\n    instruments.forEach(token => this.subscriptions.add(token));\n    this.ws.send(JSON.stringify({\n      type: 'subscribe',\n      tokens: instruments,\n    }));\n  }\n\n  unsubscribe(instruments: number[]) {\n    if (!this.ws || this.ws.readyState !== WebSocket.OPEN) {\n      console.error('WebSocket is not connected');\n      return;\n    }\n\n    instruments.forEach(token => this.subscriptions.delete(token));\n    this.ws.send(JSON.stringify({\n      type: 'unsubscribe',\n      tokens: instruments,\n    }));\n  }\n\n  addMessageHandler(handler: (data: any) => void) {\n    this.messageHandlers.push(handler);\n  }\n\n  removeMessageHandler(handler: (data: any) => void) {\n    this.messageHandlers = this.messageHandlers.filter(h => h !== handler);\n  }\n\n  disconnect() {\n    if (this.ws) {\n      this.ws.close();\n      this.ws = null;\n      this.subscriptions.clear();\n      this.messageHandlers = [];\n    }\n  }\n}\n\nexport const websocketSlice = createSlice({\n  name: 'websocket',\n  initialState,\n  reducers: {\n    setConnected: (state, action: PayloadAction<boolean>) => {\n      state.connected = action.payload;\n    },\n    setClientId: (state, action: PayloadAction<string>) => {\n      state.clientId = action.payload;\n    },\n    addSubscription: (state, action: PayloadAction<number>) => {\n      if (!state.subscriptions.includes(action.payload)) {\n        state.subscriptions.push(action.payload);\n      }\n    },\n    removeSubscription: (state, action: PayloadAction<number>) => {\n      state.subscriptions = state.subscriptions.filter(id => id !== action.payload);\n    },\n  },\n});\n\nexport const {\n  setConnected,\n  setClientId,\n  addSubscription,\n  removeSubscription,\n} = websocketSlice.actions;\n\nexport const websocketReducer = websocketSlice.reducer;\nexport const websocketService = WebSocketService.getInstance();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}